{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "str2",
          "type": "string"
        }
      ],
      "name": "appendString",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str1",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "appendUint",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "encodedCalldata",
              "type": "bytes"
            }
          ],
          "internalType": "struct SlingshotI.TradeFormat[]",
          "name": "trades",
          "type": "tuple[]"
        }
      ],
      "name": "executeTrades",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "prependNumber",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "contract IWrappedNATIVE",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "569:2723:2:-:0;;;1008:172;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:18;719:10:24;936:18:18;:32::i;:::-;-1:-1:-1;;;1081:26:2;;;;;;;1117:56;;;;;569:2723;;2426:187:18;2499:16;2518:6;;-1:-1:-1;;;;;;2534:17:18;;-1:-1:-1;;;;;2534:17:18;;;;;;;;2566:40;;2518:6;;;2534:17;;2518:6;;2566:40;;;2489:124;2426:187;:::o;14:177:32:-;93:13;;-1:-1:-1;;;;;135:31:32;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;:::-;569:2723:2;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "569:2723:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;951:50;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5115:32:32;;;;5097:51;;5085:2;5070:18;951:50:2;;;;;;;;729:184:7;;;;;;;;;;-1:-1:-1;729:184:7;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1824:101:18:-;;;;;;;;;;;;;:::i;:::-;;1084:185:7;;;;;;;;;;-1:-1:-1;1084:185:7;;;;;:::i;:::-;;:::i;1201:85:18:-;;;;;;;;;;-1:-1:-1;1247:7:18;1273:6;-1:-1:-1;;;;;1273:6:18;1201:85;;386:187:7;;;;;;;;;;-1:-1:-1;386:187:7;;;;;:::i;:::-;;:::i;1376:588:2:-;;;;;;;;;;-1:-1:-1;1376:588:2;;;;;:::i;:::-;;:::i;2247:360::-;;;;;;;;;;-1:-1:-1;2247:360:2;;;;;:::i;:::-;;:::i;2847:408::-;;;;;;;;;;-1:-1:-1;2847:408:2;;;;;:::i;:::-;;:::i;815:36::-;;;;;;;;;;;;;;;2074:198:18;;;;;;;;;;-1:-1:-1;2074:198:18;;;;;:::i;:::-;;:::i;729:184:7:-;823:20;886:4;892:12;:1;:10;:12::i;:::-;869:36;;;;;;;;;:::i;:::-;;;;;;;;;;;;;855:51;;729:184;;;;:::o;1824:101:18:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;1084:185:7:-;1180:20;1243:12;:1;:10;:12::i;:::-;1257:3;1226:35;;;;;;;;;:::i;386:187::-;491:20;554:4;560;537:28;;;;;;;;;:::i;1376:588:2:-;1094:13:18;:11;:13::i;:::-;1464:9:2::1;1459:499;1479:17:::0;;::::1;1459:499;;;1599:12;1613:17:::0;1634:6:::1;;1641:1;1634:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:40;::::0;::::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;;;;;1634:70:2::1;1705:6:::0;;1712:1;1705:9;;::::1;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:25;::::0;::::1;::::0;::::1;::::0;::::1;:::i;:::-;1634:97;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1598:133;;;;1771:7;1796:137;1837:4;1864:51;1875:36;;;;;;;;;;;;;;;;::::0;1913:1:::1;1864:10;:51::i;1796:137::-;1746:201;;;;::::0;-1:-1:-1;;;1746:201:2;;::::1;::::0;;::::1;;;:::i;:::-;;;;;;;;;;1503:455;;1498:3;;;;;:::i;:::-;;;;1459:499;;;;1376:588:::0;;:::o;2247:360::-;1094:13:18;:11;:13::i;:::-;2384:11:2::1;-1:-1:-1::0;;;;;2375:20:2;;::::1;::::0;;::::1;;2371:230;;;2430:26;::::0;2412:12:::1;::::0;-1:-1:-1;;;;;2430:7:2;::::1;::::0;2445:6;;2412:12;2430:26;2412:12;2430:26;2445:6;2430:7;:26:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2411:45;;;2478:7;2470:51;;;::::0;-1:-1:-1;;;2470:51:2;;7836:2:32;2470:51:2::1;::::0;::::1;7818:21:32::0;7875:2;7855:18;;;7848:30;7914:33;7894:18;;;7887:61;7965:18;;2470:51:2::1;7634:355:32::0;2470:51:2::1;2397:135;1459:499;1376:588:::0;;:::o;2371:230::-:1;2552:38;-1:-1:-1::0;;;;;2552:26:2;::::1;2579:2:::0;2583:6;2552:26:::1;:38::i;2847:408::-:0;1094:13:18;:11;:13::i;:::-;2981:11:2::1;-1:-1:-1::0;;;;;2972:20:2;;::::1;::::0;;::::1;;2968:281;;;3008:35;::::0;-1:-1:-1;;;3008:35:2;;::::1;::::0;::::1;8909:25:32::0;;;3008:18:2::1;-1:-1:-1::0;;;;;3008:27:2::1;::::0;::::1;::::0;8882:18:32;;3008:35:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;3076:26:2::1;::::0;3058:12:::1;::::0;-1:-1:-1;;;;;;3076:7:2;::::1;::::0;-1:-1:-1;3091:6:2;;3058:12;3076:26;3058:12;3076:26;3091:6;3076:7;:26:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3057:45;;;3124:7;3116:53;;;::::0;-1:-1:-1;;;3116:53:2;;7073:2:32;3116:53:2::1;::::0;::::1;7055:21:32::0;7112:2;7092:18;;;7085:30;7151:34;7131:18;;;7124:62;-1:-1:-1;;;7202:18:32;;;7195:31;7243:19;;3116:53:2::1;6871:397:32::0;2074:198:18;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:18;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:18;;6259:2:32;2154:73:18::1;::::0;::::1;6241:21:32::0;6298:2;6278:18;;;6271:30;6337:34;6317:18;;;6310:62;-1:-1:-1;;;6388:18:32;;;6381:36;6434:19;;2154:73:18::1;6057:402:32::0;2154:73:18::1;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;447:696:25:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:25;-1:-1:-1;604:41:25;-1:-1:-1;765:28:25;;;781:2;765:28;820:280;-1:-1:-1;;851:5:25;-1:-1:-1;;;985:2:25;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1068:10:25;1064:21;;1080:5;;1064:21;820:280;;;-1:-1:-1;1120:6:25;447:696;-1:-1:-1;;;447:696:25:o;1359:130:18:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:18;719:10:24;1422:23:18;1414:68;;;;-1:-1:-1;;;1414:68:18;;7475:2:32;1414:68:18;;;7457:21:32;;;7494:18;;;7487:30;7553:34;7533:18;;;7526:62;7605:18;;1414:68:18;7273:356:32;2426:187:18;2499:16;2518:6;;-1:-1:-1;;;;;;2534:17:18;;-1:-1:-1;;;;;2534:17:18;;;;;;;;2566:40;;2518:6;;;2534:17;;2518:6;;2566:40;;;2489:124;2426:187;:::o;941:175:22:-;1050:58;;;-1:-1:-1;;;;;5351:32:32;;1050:58:22;;;5333:51:32;5400:18;;;;5393:34;;;1050:58:22;;;;;;;;;;5306:18:32;;;;1050:58:22;;;;;;;;-1:-1:-1;;;;;1050:58:22;-1:-1:-1;;;1050:58:22;;;1023:86;;1043:5;;1023:19;:86::i;10139:916:28:-;10192:7;;-1:-1:-1;;;10267:17:28;;10263:103;;-1:-1:-1;;;10304:17:28;;;;-1:-1:-1;10339:12:28;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:28;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:28;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:28;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:28;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:28;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;10950:66;11042:6;10139:916;-1:-1:-1;;10139:916:28:o;5196:642:22:-;5641:69;;;;;;;;;;;;;;;;;;5615:23;;5641:69;;-1:-1:-1;;;;;5641:27:22;;;5669:4;;5641:27;:69::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;-1:-1:-1;;;5720:111:22;;8554:2:32;5720:111:22;;;8536:21:32;8593:2;8573:18;;;8566:30;8632:34;8612:18;;;8605:62;-1:-1:-1;;;8683:18:32;;;8676:40;8733:19;;5720:111:22;8352:406:32;4108:223:23;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:23:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;-1:-1:-1;;;5354:81:23;;6666:2:32;5354:81:23;;;6648:21:32;6705:2;6685:18;;;6678:30;6744:34;6724:18;;;6717:62;-1:-1:-1;;;6795:18:32;;;6788:36;6841:19;;5354:81:23;6464:402:32;5354:81:23;5446:12;5460:23;5487:6;-1:-1:-1;;;;;5487:11:23;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:23:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:17;;7902:286;;-1:-1:-1;;;;;1702:19:23;;;8113:60;;;;-1:-1:-1;;;8113:60:23;;8196:2:32;8113:60:23;;;8178:21:32;8235:2;8215:18;;;8208:30;8274:31;8254:18;;;8247:59;8323:18;;8113:60:23;7994:353:32;8113:60:23;-1:-1:-1;8208:10:23;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9324:20;;-1:-1:-1;;;9324:20:23;;;;9331:12;;9324:20;;;:::i;14:173:32:-;82:20;;-1:-1:-1;;;;;131:31:32;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:719::-;235:5;288:3;281:4;273:6;269:17;265:27;255:55;;306:1;303;296:12;255:55;342:6;329:20;368:18;405:2;401;398:10;395:36;;;411:18;;:::i;:::-;486:2;480:9;454:2;540:13;;-1:-1:-1;;536:22:32;;;560:2;532:31;528:40;516:53;;;584:18;;;604:22;;;581:46;578:72;;;630:18;;:::i;:::-;670:10;666:2;659:22;705:2;697:6;690:18;751:3;744:4;739:2;731:6;727:15;723:26;720:35;717:55;;;768:1;765;758:12;717:55;832:2;825:4;817:6;813:17;806:4;798:6;794:17;781:54;879:1;872:4;867:2;859:6;855:15;851:26;844:37;899:6;890:15;;;;;;192:719;;;;:::o;916:186::-;975:6;1028:2;1016:9;1007:7;1003:23;999:32;996:52;;;1044:1;1041;1034:12;996:52;1067:29;1086:9;1067:29;:::i;:::-;1057:39;916:186;-1:-1:-1;;;916:186:32:o;1107:328::-;1184:6;1192;1200;1253:2;1241:9;1232:7;1228:23;1224:32;1221:52;;;1269:1;1266;1259:12;1221:52;1292:29;1311:9;1292:29;:::i;:::-;1282:39;;1340:38;1374:2;1363:9;1359:18;1340:38;:::i;:::-;1330:48;;1425:2;1414:9;1410:18;1397:32;1387:42;;1107:328;;;;;:::o;1440:646::-;1557:6;1565;1618:2;1606:9;1597:7;1593:23;1589:32;1586:52;;;1634:1;1631;1624:12;1586:52;1674:9;1661:23;1703:18;1744:2;1736:6;1733:14;1730:34;;;1760:1;1757;1750:12;1730:34;1798:6;1787:9;1783:22;1773:32;;1843:7;1836:4;1832:2;1828:13;1824:27;1814:55;;1865:1;1862;1855:12;1814:55;1905:2;1892:16;1931:2;1923:6;1920:14;1917:34;;;1947:1;1944;1937:12;1917:34;2000:7;1995:2;1985:6;1982:1;1978:14;1974:2;1970:23;1966:32;1963:45;1960:65;;;2021:1;2018;2011:12;1960:65;2052:2;2044:11;;;;;2074:6;;-1:-1:-1;1440:646:32;;-1:-1:-1;;;;1440:646:32:o;2091:277::-;2158:6;2211:2;2199:9;2190:7;2186:23;2182:32;2179:52;;;2227:1;2224;2217:12;2179:52;2259:9;2253:16;2312:5;2305:13;2298:21;2291:5;2288:32;2278:60;;2334:1;2331;2324:12;2373:543;2461:6;2469;2522:2;2510:9;2501:7;2497:23;2493:32;2490:52;;;2538:1;2535;2528:12;2490:52;2578:9;2565:23;2607:18;2648:2;2640:6;2637:14;2634:34;;;2664:1;2661;2654:12;2634:34;2687:50;2729:7;2720:6;2709:9;2705:22;2687:50;:::i;:::-;2677:60;;2790:2;2779:9;2775:18;2762:32;2746:48;;2819:2;2809:8;2806:16;2803:36;;;2835:1;2832;2825:12;2803:36;;2858:52;2902:7;2891:8;2880:9;2876:24;2858:52;:::i;:::-;2848:62;;;2373:543;;;;;:::o;2921:390::-;2999:6;3007;3060:2;3048:9;3039:7;3035:23;3031:32;3028:52;;;3076:1;3073;3066:12;3028:52;3116:9;3103:23;3149:18;3141:6;3138:30;3135:50;;;3181:1;3178;3171:12;3135:50;3204;3246:7;3237:6;3226:9;3222:22;3204:50;:::i;:::-;3194:60;3301:2;3286:18;;;;3273:32;;-1:-1:-1;;;;2921:390:32:o;3316:::-;3394:6;3402;3455:2;3443:9;3434:7;3430:23;3426:32;3423:52;;;3471:1;3468;3461:12;3423:52;3507:9;3494:23;3484:33;;3568:2;3557:9;3553:18;3540:32;3595:18;3587:6;3584:30;3581:50;;;3627:1;3624;3617:12;3581:50;3650;3692:7;3683:6;3672:9;3668:22;3650:50;:::i;3711:271::-;3894:6;3886;3881:3;3868:33;3850:3;3920:16;;3945:13;;;3920:16;3711:271;-1:-1:-1;3711:271:32:o;3987:274::-;4116:3;4154:6;4148:13;4170:53;4216:6;4211:3;4204:4;4196:6;4192:17;4170:53;:::i;:::-;4239:16;;;;;3987:274;-1:-1:-1;;3987:274:32:o;4266:470::-;4445:3;4483:6;4477:13;4499:53;4545:6;4540:3;4533:4;4525:6;4521:17;4499:53;:::i;:::-;4615:13;;4574:16;;;;4637:57;4615:13;4574:16;4671:4;4659:17;;4637:57;:::i;:::-;4710:20;;4266:470;-1:-1:-1;;;;4266:470:32:o;5669:383::-;5818:2;5807:9;5800:21;5781:4;5850:6;5844:13;5893:6;5888:2;5877:9;5873:18;5866:34;5909:66;5968:6;5963:2;5952:9;5948:18;5943:2;5935:6;5931:15;5909:66;:::i;:::-;6036:2;6015:15;-1:-1:-1;;6011:29:32;5996:45;;;;6043:2;5992:54;;5669:383;-1:-1:-1;;5669:383:32:o;8945:521::-;9022:4;9028:6;9088:11;9075:25;9182:2;9178:7;9167:8;9151:14;9147:29;9143:43;9123:18;9119:68;9109:96;;9201:1;9198;9191:12;9109:96;9228:33;;9280:20;;;-1:-1:-1;9323:18:32;9312:30;;9309:50;;;9355:1;9352;9345:12;9309:50;9388:4;9376:17;;-1:-1:-1;9419:14:32;9415:27;;;9405:38;;9402:58;;;9456:1;9453;9446:12;9402:58;8945:521;;;;;:::o;9471:328::-;9568:4;9626:11;9613:25;9720:2;9716:7;9705:8;9689:14;9685:29;9681:43;9661:18;9657:68;9647:96;;9739:1;9736;9729:12;9804:258;9876:1;9886:113;9900:6;9897:1;9894:13;9886:113;;;9976:11;;;9970:18;9957:11;;;9950:39;9922:2;9915:10;9886:113;;;10017:6;10014:1;10011:13;10008:48;;;-1:-1:-1;;10052:1:32;10034:16;;10027:27;9804:258::o;10067:232::-;10106:3;-1:-1:-1;;10127:17:32;;10124:140;;;10186:10;10181:3;10177:20;10174:1;10167:31;10221:4;10218:1;10211:15;10249:4;10246:1;10239:15;10124:140;-1:-1:-1;10291:1:32;10280:13;;10067:232::o;10436:127::-;10497:10;10492:3;10488:20;10485:1;10478:31;10528:4;10525:1;10518:15;10552:4;10549:1;10542:15;10568:127;10629:10;10624:3;10620:20;10617:1;10610:31;10660:4;10657:1;10650:15;10684:4;10681:1;10674:15",
    "linkReferences": {},
    "immutableReferences": {
      "159": [
        {
          "start": 529,
          "length": 32
        },
        {
          "start": 1075,
          "length": 32
        },
        {
          "start": 1330,
          "length": 32
        }
      ],
      "163": [
        {
          "start": 190,
          "length": 32
        },
        {
          "start": 1408,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "appendString(string,string)": "c35085fb",
    "appendUint(string,uint256)": "31489907",
    "executeTrades((address,bytes)[])": "c62bd31d",
    "nativeToken()": "e1758bd8",
    "owner()": "8da5cb5b",
    "prependNumber(uint256,string)": "82a5be33",
    "renounceOwnership()": "715018a6",
    "rescueTokens(address,address,uint256)": "cea9d26f",
    "sendFunds(address,address,uint256)": "e0ca1474",
    "transferOwnership(address)": "f2fde38b",
    "wrappedNativeToken()": "17fcb39b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"str2\",\"type\":\"string\"}],\"name\":\"appendString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str1\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"appendUint\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedCalldata\",\"type\":\"bytes\"}],\"internalType\":\"struct SlingshotI.TradeFormat[]\",\"name\":\"trades\",\"type\":\"tuple[]\"}],\"name\":\"executeTrades\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"prependNumber\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"contract IWrappedNATIVE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"DEXAG, Inc.\",\"kind\":\"dev\",\"methods\":{\"appendString(string,string)\":{\"params\":{\"str1\":\"String to concat\",\"str2\":\"String to concat\"},\"returns\":{\"result\":\"Concatenated strings\"}},\"appendUint(string,uint256)\":{\"params\":{\"i\":\"Number to append\",\"str1\":\"String to concat\"},\"returns\":{\"result\":\"Concatenated strings\"}},\"executeTrades((address,bytes)[])\":{\"params\":{\"trades\":\"Array of encoded trades that are atomically executed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"prependNumber(uint256,string)\":{\"params\":{\"i\":\"Number to concat\",\"str\":\"String to concat\"},\"returns\":{\"result\":\"Concatenated string and number\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rescueTokens(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the token to rescue\",\"to\":\"The address of recipient\",\"token\":\"The address of the token to rescue\"}},\"sendFunds(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the token to send\",\"to\":\"The address of recipient\",\"token\":\"The address of the token to send\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"nativeToken\":{\"details\":\"address of native token, if you are trading ETH on Ethereum,      matic on Matic etc you should use this address as token from\"},\"wrappedNativeToken\":{\"details\":\"address of wrapped native token, for Ethereum it's WETH, for Matic is wmatic etc\"}},\"title\":\"Slingshot Execution Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"appendString(string,string)\":{\"notice\":\"Concat two strings\"},\"appendUint(string,uint256)\":{\"notice\":\"Concat two strings\"},\"executeTrades((address,bytes)[])\":{\"notice\":\"Executes multi-hop trades to get the best result         It's up to BE to whitelist tokens\"},\"prependNumber(uint256,string)\":{\"notice\":\"Concat number and string\"},\"rescueTokens(address,address,uint256)\":{\"notice\":\"In an unlikely scenario of tokens being send to this contract         allow admin to rescue them.\"},\"sendFunds(address,address,uint256)\":{\"notice\":\"Sends token funds. For native token, it unwraps wrappedNativeToken\"}},\"notice\":\"This contract serves as the isolated execution space for trading contract          a Slingshot transaction on-chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Executioner.sol\":\"Executioner\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@erc725/=node_modules/@erc725/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\"]},\"sources\":{\"contracts/Executioner.sol\":{\"keccak256\":\"0x204fe2456a5bd660e791674ff7a6c1a4e15c52dcb52e2a5f873f9cc447003de0\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://2f9a62978f7dfe0b6290ae9da4507b3e0672afc1014a0cff2176ff8175f3b12f\",\"dweb:/ipfs/QmdAXQaXJg5Fs59LCVr45n6oTtKc3JL6hoF5dmwakhQHHe\"]},\"contracts/interface/IWrappedNATIVE.sol\":{\"keccak256\":\"0x9ad0ad5b0c317778f369dce14af282665164a784f64db86c6324e1fe3d534452\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://55e0c7dda7e676cab0a917be8ad344ea451bfa51e219d36daae9eabf99fd74ec\",\"dweb:/ipfs/QmVFcyPwQjt3Tv3qGT5Eb9beKhfqACZVniT7TwTnT4exfA\"]},\"contracts/interface/SlingshotI.sol\":{\"keccak256\":\"0xaa3008d7f04541d9d7e000163d0bf79498eea69fcf4240fe3ad3053b6aa5454e\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://c6440dbe6e373f6631bd9af55ec3fe4c3cbc79dd7f34fb381b2c7e764ec49785\",\"dweb:/ipfs/QmVLHFVpHLh5Eh8NmcxJyBzzq5dgX32xfrTpP4uaR1WgS4\"]},\"contracts/lib/ConcatStrings.sol\":{\"keccak256\":\"0xa1973ef53a9e3a26143c24a1bb82d777f9da624a74813b0352a1a978f6c76362\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://dc22a3a1e707b4baa595ea025e5cd052ea3347bd89a55dcc00dadd654dfed963\",\"dweb:/ipfs/QmQypYYf1qZ2KUvpSE3LcnRdK4SUEEiXj5uJce5ZukrZ7c\"]},\"node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68\",\"dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"node_modules/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.7+commit.e28d00a7"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_nativeToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_wrappedNativeToken",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "str1",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "str2",
              "type": "string"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "appendString",
          "outputs": [
            {
              "internalType": "string",
              "name": "result",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "str1",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "appendUint",
          "outputs": [
            {
              "internalType": "string",
              "name": "result",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct SlingshotI.TradeFormat[]",
              "name": "trades",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "encodedCalldata",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "executeTrades"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nativeToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "str",
              "type": "string"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "prependNumber",
          "outputs": [
            {
              "internalType": "string",
              "name": "result",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rescueTokens"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "sendFunds"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "wrappedNativeToken",
          "outputs": [
            {
              "internalType": "contract IWrappedNATIVE",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "appendString(string,string)": {
            "params": {
              "str1": "String to concat",
              "str2": "String to concat"
            },
            "returns": {
              "result": "Concatenated strings"
            }
          },
          "appendUint(string,uint256)": {
            "params": {
              "i": "Number to append",
              "str1": "String to concat"
            },
            "returns": {
              "result": "Concatenated strings"
            }
          },
          "executeTrades((address,bytes)[])": {
            "params": {
              "trades": "Array of encoded trades that are atomically executed"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "prependNumber(uint256,string)": {
            "params": {
              "i": "Number to concat",
              "str": "String to concat"
            },
            "returns": {
              "result": "Concatenated string and number"
            }
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "rescueTokens(address,address,uint256)": {
            "params": {
              "amount": "The amount of the token to rescue",
              "to": "The address of recipient",
              "token": "The address of the token to rescue"
            }
          },
          "sendFunds(address,address,uint256)": {
            "params": {
              "amount": "The amount of the token to send",
              "to": "The address of recipient",
              "token": "The address of the token to send"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "appendString(string,string)": {
            "notice": "Concat two strings"
          },
          "appendUint(string,uint256)": {
            "notice": "Concat two strings"
          },
          "executeTrades((address,bytes)[])": {
            "notice": "Executes multi-hop trades to get the best result         It's up to BE to whitelist tokens"
          },
          "prependNumber(uint256,string)": {
            "notice": "Concat number and string"
          },
          "rescueTokens(address,address,uint256)": {
            "notice": "In an unlikely scenario of tokens being send to this contract         allow admin to rescue them."
          },
          "sendFunds(address,address,uint256)": {
            "notice": "Sends token funds. For native token, it unwraps wrappedNativeToken"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@erc725/=node_modules/@erc725/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@uniswap/=node_modules/@uniswap/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "eth-gas-reporter/=node_modules/eth-gas-reporter/",
        "forge-std/=lib/forge-std/src/",
        "hardhat-deploy/=node_modules/hardhat-deploy/",
        "hardhat/=node_modules/hardhat/",
        "solidity-bytes-utils/=node_modules/solidity-bytes-utils/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/Executioner.sol": "Executioner"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/Executioner.sol": {
        "keccak256": "0x204fe2456a5bd660e791674ff7a6c1a4e15c52dcb52e2a5f873f9cc447003de0",
        "urls": [
          "bzz-raw://2f9a62978f7dfe0b6290ae9da4507b3e0672afc1014a0cff2176ff8175f3b12f",
          "dweb:/ipfs/QmdAXQaXJg5Fs59LCVr45n6oTtKc3JL6hoF5dmwakhQHHe"
        ],
        "license": "AGPLv3"
      },
      "contracts/interface/IWrappedNATIVE.sol": {
        "keccak256": "0x9ad0ad5b0c317778f369dce14af282665164a784f64db86c6324e1fe3d534452",
        "urls": [
          "bzz-raw://55e0c7dda7e676cab0a917be8ad344ea451bfa51e219d36daae9eabf99fd74ec",
          "dweb:/ipfs/QmVFcyPwQjt3Tv3qGT5Eb9beKhfqACZVniT7TwTnT4exfA"
        ],
        "license": "AGPLv3"
      },
      "contracts/interface/SlingshotI.sol": {
        "keccak256": "0xaa3008d7f04541d9d7e000163d0bf79498eea69fcf4240fe3ad3053b6aa5454e",
        "urls": [
          "bzz-raw://c6440dbe6e373f6631bd9af55ec3fe4c3cbc79dd7f34fb381b2c7e764ec49785",
          "dweb:/ipfs/QmVLHFVpHLh5Eh8NmcxJyBzzq5dgX32xfrTpP4uaR1WgS4"
        ],
        "license": "AGPLv3"
      },
      "contracts/lib/ConcatStrings.sol": {
        "keccak256": "0xa1973ef53a9e3a26143c24a1bb82d777f9da624a74813b0352a1a978f6c76362",
        "urls": [
          "bzz-raw://dc22a3a1e707b4baa595ea025e5cd052ea3347bd89a55dcc00dadd654dfed963",
          "dweb:/ipfs/QmQypYYf1qZ2KUvpSE3LcnRdK4SUEEiXj5uJce5ZukrZ7c"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@openzeppelin/contracts/access/Ownable.sol": {
        "keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
        "urls": [
          "bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
          "dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "keccak256": "0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a",
        "urls": [
          "bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a",
          "dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1",
        "urls": [
          "bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68",
          "dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
        "urls": [
          "bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
          "dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
        "urls": [
          "bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
          "dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
        "keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
        "urls": [
          "bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
          "dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
        "urls": [
          "bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
          "dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/Executioner.sol",
    "id": 331,
    "exportedSymbols": {
      "Address": [
        3039
      ],
      "ConcatStrings": [
        1131
      ],
      "Context": [
        3061
      ],
      "Executioner": [
        330
      ],
      "IERC20": [
        2297
      ],
      "IERC20Permit": [
        2333
      ],
      "IWrappedNATIVE": [
        1050
      ],
      "Math": [
        4192
      ],
      "Ownable": [
        2154
      ],
      "SafeERC20": [
        2709
      ],
      "SignedMath": [
        4297
      ],
      "SlingshotI": [
        1059
      ],
      "Strings": [
        3290
      ]
    },
    "nodeType": "SourceUnit",
    "src": "35:3258:2",
    "nodes": [
      {
        "id": 138,
        "nodeType": "PragmaDirective",
        "src": "35:22:2",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".7"
        ]
      },
      {
        "id": 139,
        "nodeType": "PragmaDirective",
        "src": "58:19:2",
        "nodes": [],
        "literals": [
          "abicoder",
          "v2"
        ]
      },
      {
        "id": 140,
        "nodeType": "ImportDirective",
        "src": "79:56:2",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 331,
        "sourceUnit": 2298,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 141,
        "nodeType": "ImportDirective",
        "src": "136:65:2",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 331,
        "sourceUnit": 2710,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 142,
        "nodeType": "ImportDirective",
        "src": "202:52:2",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 331,
        "sourceUnit": 2155,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 143,
        "nodeType": "ImportDirective",
        "src": "255:36:2",
        "nodes": [],
        "absolutePath": "contracts/interface/SlingshotI.sol",
        "file": "./interface/SlingshotI.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 331,
        "sourceUnit": 1060,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 144,
        "nodeType": "ImportDirective",
        "src": "292:40:2",
        "nodes": [],
        "absolutePath": "contracts/interface/IWrappedNATIVE.sol",
        "file": "./interface/IWrappedNATIVE.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 331,
        "sourceUnit": 1051,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 145,
        "nodeType": "ImportDirective",
        "src": "333:33:2",
        "nodes": [],
        "absolutePath": "contracts/lib/ConcatStrings.sol",
        "file": "./lib/ConcatStrings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 331,
        "sourceUnit": 1132,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 330,
        "nodeType": "ContractDefinition",
        "src": "569:2723:2",
        "nodes": [
          {
            "id": 156,
            "nodeType": "UsingForDirective",
            "src": "634:27:2",
            "nodes": [],
            "libraryName": {
              "id": 153,
              "name": "SafeERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2709,
              "src": "640:9:2"
            },
            "typeName": {
              "id": 155,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 154,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 2297,
                "src": "654:6:2"
              },
              "referencedDeclaration": 2297,
              "src": "654:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$2297",
                "typeString": "contract IERC20"
              }
            }
          },
          {
            "id": 159,
            "nodeType": "VariableDeclaration",
            "src": "815:36:2",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 157,
              "nodeType": "StructuredDocumentation",
              "src": "667:143:2",
              "text": "@dev address of native token, if you are trading ETH on Ethereum,\n      matic on Matic etc you should use this address as token from"
            },
            "functionSelector": "e1758bd8",
            "mutability": "immutable",
            "name": "nativeToken",
            "nameLocation": "840:11:2",
            "scope": 330,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 158,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "815:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 163,
            "nodeType": "VariableDeclaration",
            "src": "951:50:2",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 160,
              "nodeType": "StructuredDocumentation",
              "src": "857:89:2",
              "text": "@dev address of wrapped native token, for Ethereum it's WETH, for Matic is wmatic etc"
            },
            "functionSelector": "17fcb39b",
            "mutability": "immutable",
            "name": "wrappedNativeToken",
            "nameLocation": "983:18:2",
            "scope": 330,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IWrappedNATIVE_$1050",
              "typeString": "contract IWrappedNATIVE"
            },
            "typeName": {
              "id": 162,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 161,
                "name": "IWrappedNATIVE",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1050,
                "src": "951:14:2"
              },
              "referencedDeclaration": 1050,
              "src": "951:14:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IWrappedNATIVE_$1050",
                "typeString": "contract IWrappedNATIVE"
              }
            },
            "visibility": "public"
          },
          {
            "id": 181,
            "nodeType": "FunctionDefinition",
            "src": "1008:172:2",
            "nodes": [],
            "body": {
              "id": 180,
              "nodeType": "Block",
              "src": "1071:109:2",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 172,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 170,
                      "name": "nativeToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 159,
                      "src": "1081:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 171,
                      "name": "_nativeToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 165,
                      "src": "1095:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1081:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 173,
                  "nodeType": "ExpressionStatement",
                  "src": "1081:26:2"
                },
                {
                  "expression": {
                    "id": 178,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 174,
                      "name": "wrappedNativeToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 163,
                      "src": "1117:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IWrappedNATIVE_$1050",
                        "typeString": "contract IWrappedNATIVE"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 176,
                          "name": "_wrappedNativeToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "1153:19:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 175,
                        "name": "IWrappedNATIVE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1050,
                        "src": "1138:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IWrappedNATIVE_$1050_$",
                          "typeString": "type(contract IWrappedNATIVE)"
                        }
                      },
                      "id": 177,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1138:35:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IWrappedNATIVE_$1050",
                        "typeString": "contract IWrappedNATIVE"
                      }
                    },
                    "src": "1117:56:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IWrappedNATIVE_$1050",
                      "typeString": "contract IWrappedNATIVE"
                    }
                  },
                  "id": 179,
                  "nodeType": "ExpressionStatement",
                  "src": "1117:56:2"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 168,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 165,
                  "mutability": "mutable",
                  "name": "_nativeToken",
                  "nameLocation": "1028:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 181,
                  "src": "1020:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 164,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1020:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 167,
                  "mutability": "mutable",
                  "name": "_wrappedNativeToken",
                  "nameLocation": "1050:19:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 181,
                  "src": "1042:27:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 166,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1042:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1019:51:2"
            },
            "returnParameters": {
              "id": 169,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1071:0:2"
            },
            "scope": 330,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 237,
            "nodeType": "FunctionDefinition",
            "src": "1376:588:2",
            "nodes": [],
            "body": {
              "id": 236,
              "nodeType": "Block",
              "src": "1449:515:2",
              "nodes": [],
              "statements": [
                {
                  "body": {
                    "id": 234,
                    "nodeType": "Block",
                    "src": "1503:455:2",
                    "statements": [
                      {
                        "assignments": [
                          203,
                          205
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 203,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "1604:7:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 234,
                            "src": "1599:12:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 202,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "1599:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 205,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "1626:4:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 234,
                            "src": "1613:17:2",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 204,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "1613:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 216,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 211,
                                  "name": "trades",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 186,
                                  "src": "1705:6:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_TradeFormat_$1058_calldata_ptr_$dyn_calldata_ptr",
                                    "typeString": "struct SlingshotI.TradeFormat calldata[] calldata"
                                  }
                                },
                                "id": 213,
                                "indexExpression": {
                                  "id": 212,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 192,
                                  "src": "1712:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1705:9:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TradeFormat_$1058_calldata_ptr",
                                  "typeString": "struct SlingshotI.TradeFormat calldata"
                                }
                              },
                              "id": 214,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "encodedCalldata",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1057,
                              "src": "1705:25:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 206,
                                  "name": "trades",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 186,
                                  "src": "1634:6:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_TradeFormat_$1058_calldata_ptr_$dyn_calldata_ptr",
                                    "typeString": "struct SlingshotI.TradeFormat calldata[] calldata"
                                  }
                                },
                                "id": 208,
                                "indexExpression": {
                                  "id": 207,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 192,
                                  "src": "1641:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1634:9:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TradeFormat_$1058_calldata_ptr",
                                  "typeString": "struct SlingshotI.TradeFormat calldata"
                                }
                              },
                              "id": 209,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "moduleAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1055,
                              "src": "1634:40:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 210,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "delegatecall",
                            "nodeType": "MemberAccess",
                            "src": "1634:70:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) returns (bool,bytes memory)"
                            }
                          },
                          "id": 215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1634:97:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1598:133:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 218,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 203,
                              "src": "1771:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 222,
                                      "name": "data",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 205,
                                      "src": "1837:4:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 221,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1830:6:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                      "typeString": "type(string storage pointer)"
                                    },
                                    "typeName": {
                                      "id": 220,
                                      "name": "string",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1830:6:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 223,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1830:12:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "hexValue": "457865637574696f6e65723a2073776170206661696c65643a20",
                                          "id": 227,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "1882:28:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_dc70f9c004289f6132bf571547a88ab57993d064381c804a85efe041dd890338",
                                            "typeString": "literal_string \"Executioner: swap failed: \""
                                          },
                                          "value": "Executioner: swap failed: "
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_stringliteral_dc70f9c004289f6132bf571547a88ab57993d064381c804a85efe041dd890338",
                                            "typeString": "literal_string \"Executioner: swap failed: \""
                                          }
                                        ],
                                        "id": 226,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "1875:6:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                          "typeString": "type(string storage pointer)"
                                        },
                                        "typeName": {
                                          "id": 225,
                                          "name": "string",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "1875:6:2",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 228,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1875:36:2",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    },
                                    {
                                      "id": 229,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 192,
                                      "src": "1913:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 224,
                                    "name": "appendUint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1108,
                                    "src": "1864:10:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (string memory,uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 230,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1864:51:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 219,
                                "name": "appendString",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1086,
                                "src": "1796:12:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                                  "typeString": "function (string memory,string memory) pure returns (string memory)"
                                }
                              },
                              "id": 231,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1796:137:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 217,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1746:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 232,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1746:201:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 233,
                        "nodeType": "ExpressionStatement",
                        "src": "1746:201:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 198,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 195,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 192,
                      "src": "1479:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 196,
                        "name": "trades",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 186,
                        "src": "1483:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_TradeFormat_$1058_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct SlingshotI.TradeFormat calldata[] calldata"
                        }
                      },
                      "id": 197,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1483:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1479:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 235,
                  "initializationExpression": {
                    "assignments": [
                      192
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 192,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1472:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 235,
                        "src": "1464:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 191,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1464:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 194,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 193,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1476:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1464:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 200,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1498:3:2",
                      "subExpression": {
                        "id": 199,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 192,
                        "src": "1498:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 201,
                    "nodeType": "ExpressionStatement",
                    "src": "1498:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "1459:499:2"
                }
              ]
            },
            "documentation": {
              "id": 182,
              "nodeType": "StructuredDocumentation",
              "src": "1186:185:2",
              "text": "@notice Executes multi-hop trades to get the best result\n         It's up to BE to whitelist tokens\n @param trades Array of encoded trades that are atomically executed"
            },
            "functionSelector": "c62bd31d",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 189,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 188,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2073,
                  "src": "1439:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1439:9:2"
              }
            ],
            "name": "executeTrades",
            "nameLocation": "1385:13:2",
            "parameters": {
              "id": 187,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 186,
                  "mutability": "mutable",
                  "name": "trades",
                  "nameLocation": "1422:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 237,
                  "src": "1399:29:2",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_TradeFormat_$1058_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct SlingshotI.TradeFormat[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 184,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 183,
                        "name": "TradeFormat",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1058,
                        "src": "1399:11:2"
                      },
                      "referencedDeclaration": 1058,
                      "src": "1399:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TradeFormat_$1058_storage_ptr",
                        "typeString": "struct SlingshotI.TradeFormat"
                      }
                    },
                    "id": 185,
                    "nodeType": "ArrayTypeName",
                    "src": "1399:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_TradeFormat_$1058_storage_$dyn_storage_ptr",
                      "typeString": "struct SlingshotI.TradeFormat[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1398:31:2"
            },
            "returnParameters": {
              "id": 190,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1449:0:2"
            },
            "scope": 330,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 278,
            "nodeType": "FunctionDefinition",
            "src": "2247:360:2",
            "nodes": [],
            "body": {
              "id": 277,
              "nodeType": "Block",
              "src": "2361:246:2",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 251,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 249,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 240,
                      "src": "2375:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 250,
                      "name": "nativeToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 159,
                      "src": "2384:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2375:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 275,
                    "nodeType": "Block",
                    "src": "2538:63:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 271,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 242,
                              "src": "2579:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 272,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 244,
                              "src": "2583:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 268,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 240,
                                  "src": "2559:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 267,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2297,
                                "src": "2552:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$2297_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 269,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2552:13:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$2297",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 270,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2366,
                            "src": "2552:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2297_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$2297_$",
                              "typeString": "function (contract IERC20,address,uint256)"
                            }
                          },
                          "id": 273,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2552:38:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 274,
                        "nodeType": "ExpressionStatement",
                        "src": "2552:38:2"
                      }
                    ]
                  },
                  "id": 276,
                  "nodeType": "IfStatement",
                  "src": "2371:230:2",
                  "trueBody": {
                    "id": 266,
                    "nodeType": "Block",
                    "src": "2397:135:2",
                    "statements": [
                      {
                        "assignments": [
                          253,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 253,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "2417:7:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 266,
                            "src": "2412:12:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 252,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "2412:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 260,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 258,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2453:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 254,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 242,
                                "src": "2430:2:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 255,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "2430:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 257,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 256,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 244,
                                "src": "2445:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "2430:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 259,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2430:26:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2411:45:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 262,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "2478:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "457865637574696f6e65723a2045544820726573637565206661696c65642e",
                              "id": 263,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2487:33:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c7aadde4eceda1fd68d6aa4c669a8503072591983d2c60c5a0d34bca04adfb35",
                                "typeString": "literal_string \"Executioner: ETH rescue failed.\""
                              },
                              "value": "Executioner: ETH rescue failed."
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c7aadde4eceda1fd68d6aa4c669a8503072591983d2c60c5a0d34bca04adfb35",
                                "typeString": "literal_string \"Executioner: ETH rescue failed.\""
                              }
                            ],
                            "id": 261,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2470:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 264,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2470:51:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 265,
                        "nodeType": "ExpressionStatement",
                        "src": "2470:51:2"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 238,
              "nodeType": "StructuredDocumentation",
              "src": "1970:272:2",
              "text": "@notice In an unlikely scenario of tokens being send to this contract\n         allow admin to rescue them.\n @param token The address of the token to rescue\n @param to The address of recipient\n @param amount The amount of the token to rescue"
            },
            "functionSelector": "cea9d26f",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 247,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 246,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2073,
                  "src": "2351:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "2351:9:2"
              }
            ],
            "name": "rescueTokens",
            "nameLocation": "2256:12:2",
            "parameters": {
              "id": 245,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 240,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "2286:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 278,
                  "src": "2278:13:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 239,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2278:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 242,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2309:2:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 278,
                  "src": "2301:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 241,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2301:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 244,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2329:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 278,
                  "src": "2321:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 243,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2321:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2268:73:2"
            },
            "returnParameters": {
              "id": 248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2361:0:2"
            },
            "scope": 330,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 325,
            "nodeType": "FunctionDefinition",
            "src": "2847:408:2",
            "nodes": [],
            "body": {
              "id": 324,
              "nodeType": "Block",
              "src": "2958:297:2",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 292,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 290,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 281,
                      "src": "2972:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 291,
                      "name": "nativeToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 159,
                      "src": "2981:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2972:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 322,
                    "nodeType": "Block",
                    "src": "3186:63:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 318,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "3227:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 319,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 285,
                              "src": "3231:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 315,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 281,
                                  "src": "3207:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 314,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2297,
                                "src": "3200:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$2297_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 316,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3200:13:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$2297",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 317,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2366,
                            "src": "3200:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$2297_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$2297_$",
                              "typeString": "function (contract IERC20,address,uint256)"
                            }
                          },
                          "id": 320,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3200:38:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 321,
                        "nodeType": "ExpressionStatement",
                        "src": "3200:38:2"
                      }
                    ]
                  },
                  "id": 323,
                  "nodeType": "IfStatement",
                  "src": "2968:281:2",
                  "trueBody": {
                    "id": 313,
                    "nodeType": "Block",
                    "src": "2994:186:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 296,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 285,
                              "src": "3036:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 293,
                              "name": "wrappedNativeToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 163,
                              "src": "3008:18:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IWrappedNATIVE_$1050",
                                "typeString": "contract IWrappedNATIVE"
                              }
                            },
                            "id": 295,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "withdraw",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1049,
                            "src": "3008:27:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3008:35:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 298,
                        "nodeType": "ExpressionStatement",
                        "src": "3008:35:2"
                      },
                      {
                        "assignments": [
                          300,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 300,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "3063:7:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 313,
                            "src": "3058:12:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 299,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "3058:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 307,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 305,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3099:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 301,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 283,
                                "src": "3076:2:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 302,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "3076:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 304,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 303,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 285,
                                "src": "3091:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "3076:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 306,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3076:26:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3057:45:2"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 309,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 300,
                              "src": "3124:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "457865637574696f6e65723a20455448205472616e73666572206661696c65642e",
                              "id": 310,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3133:35:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_775085033a432ca2435e2aa8c0dcf5c143215e3c71417af6f6cf62b45b0f66b4",
                                "typeString": "literal_string \"Executioner: ETH Transfer failed.\""
                              },
                              "value": "Executioner: ETH Transfer failed."
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_775085033a432ca2435e2aa8c0dcf5c143215e3c71417af6f6cf62b45b0f66b4",
                                "typeString": "literal_string \"Executioner: ETH Transfer failed.\""
                              }
                            ],
                            "id": 308,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3116:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3116:53:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 312,
                        "nodeType": "ExpressionStatement",
                        "src": "3116:53:2"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 279,
              "nodeType": "StructuredDocumentation",
              "src": "2613:229:2",
              "text": "@notice Sends token funds. For native token, it unwraps wrappedNativeToken\n @param token The address of the token to send\n @param to The address of recipient\n @param amount The amount of the token to send"
            },
            "functionSelector": "e0ca1474",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 288,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 287,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2073,
                  "src": "2948:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "2948:9:2"
              }
            ],
            "name": "sendFunds",
            "nameLocation": "2856:9:2",
            "parameters": {
              "id": 286,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 281,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "2883:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 325,
                  "src": "2875:13:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 280,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2875:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 283,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2906:2:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 325,
                  "src": "2898:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 282,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2898:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 285,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2926:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 325,
                  "src": "2918:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 284,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2918:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2865:73:2"
            },
            "returnParameters": {
              "id": 289,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2958:0:2"
            },
            "scope": 330,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 329,
            "nodeType": "FunctionDefinition",
            "src": "3261:29:2",
            "nodes": [],
            "body": {
              "id": 328,
              "nodeType": "Block",
              "src": "3288:2:2",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 326,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3268:2:2"
            },
            "returnParameters": {
              "id": 327,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3288:0:2"
            },
            "scope": 330,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 147,
              "name": "SlingshotI",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1059,
              "src": "593:10:2"
            },
            "id": 148,
            "nodeType": "InheritanceSpecifier",
            "src": "593:10:2"
          },
          {
            "baseName": {
              "id": 149,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2154,
              "src": "605:7:2"
            },
            "id": 150,
            "nodeType": "InheritanceSpecifier",
            "src": "605:7:2"
          },
          {
            "baseName": {
              "id": 151,
              "name": "ConcatStrings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1131,
              "src": "614:13:2"
            },
            "id": 152,
            "nodeType": "InheritanceSpecifier",
            "src": "614:13:2"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 146,
          "nodeType": "StructuredDocumentation",
          "src": "368:201:2",
          "text": "@title   Slingshot Execution Contract\n @author  DEXAG, Inc.\n @notice  This contract serves as the isolated execution space for trading contract\n          a Slingshot transaction on-chain."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          330,
          1131,
          2154,
          3061,
          1059
        ],
        "name": "Executioner",
        "nameLocation": "578:11:2",
        "scope": 331,
        "usedErrors": []
      }
    ],
    "license": "AGPLv3"
  },
  "id": 2
}